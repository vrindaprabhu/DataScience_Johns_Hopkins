?aggregate
print('Helllo!!!')
version()
r.ve
version
!
print("Hello, Worl")
version
print("Hello, World!")
?transform
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x,y)
z <- rnorm(100)
plot(x,z)
plot(x,y)
par(mar=c(2,2,2,2))
par(mar=c(4,4,2,2))
par(mar=c(2,2,2,2))
plot(x,y)
par(mar=c(4,4,2,2))
plot(x,y)
plot(x, y,pch = 20)
plot(x, y,pch = 2)
plot(x, y,pch = 4)
plot(x, y,pch = 3)
plot(x, y,pch = 19)
example(points)
example(points)
plot(x, y,pch = 20)
x <- rnorm(100)
y <- rnorm(100)
plot(x, y, pch = 20)
title('SP')
text(-2,-2,'label')
legend('topleft',legend = 'Data',pch = 20)
fit <- lm(y ~ x)
abline(fit,lwd = 3)
x <- rnorm(100)
y <- rnorm(100)
par(mar=c(4,4,2,2))
plot(x, y, pch = 20)
legend("topleft",legend = 'Data',pch = 20)
?gl
?Devices
?merge
?barplot
set.seed(1)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
library(quantmod) amzn = getSymbols("AMZN",auto.assign=FALSE) sampleTimes = index(amzn)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes <- index(amzn)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
sampleTimes <- index(amzn)
View(amzn)
sampleTimes
library(lubridate)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
x <- seq(c('U1','U2','U3','U4'),5)
x <- seq(c('U1','U2','U3','U4'),length.out = 5)
x <- seq(c('U1','U2','U3','U4'))
x
x <- rep(c('U1','U2','U3','U4'),5)
x
x <- sample(c('A1','A2','A3'),size = length(x),replace = T)
x
U_Vals <- rep(c('U1','U2','U3','U4'),5)
X_Vals <- sample(c('A1','A2','A3'),size = length(x),replace = T)
df <- data.frame(U_Vals,X_Vals)
View(df)
library(data.table)
table(X_Vals)
dt <- data.table(df)
dt[,.N,by=X_Vals]
setkey(dt,U_Vals)
dt[,table(X_Vals),by=key(dt)]
dt[,.N,by=U_Vals)]
dt[,.N,by=U_Vals]
dt
df
View(df)
View(dt)
aggregate(x = df,U_Vals~X_Vals)
?quanif
?quanf
?qunif
qunif()
?qunif
qunif(1)
qunif(10)
library(arules)
install.packages('arules')
install.packages('arules')
library(arules)
library('arules')
install.packages("arules")
library('arules')
library(arules)
library(arules)
install.packages("Rcmdr")
install.packages("Rcmdr")
library('arules')
install.packages("Rcmdr")
install.packages("Rcmdr")
library('arules')
install.packages("arules")
install.packages('arules', type='source')
R.Version()
install.packages("arules")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
z <- x*w
mean(z)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
sum(x*y)/sum(x^2)
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
beta1<-cor(y,x)*sd(y)/sd(x)
coef(lm(mtcars$mpg~mtcars$wt))
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)$coefficient
summary(fit)$coef[3]
fit <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit)$coef[3]
?mtcars
a <- lm(mpg ~  cyl + wt + qsec,data=mtcars)
summary(a)
a <- lm(mpg ~  cyl + wt:am + qsec,data=mtcars)
summary(a)
a <- lm(mpg ~  cyl + wt:am + am+ qsec,data=mtcars)
summary(a)
a <- lm(mpg ~  cyl + wt + am+ qsec,data=mtcars)
summary(a)
a <- lm(mpg ~  hp + wt + am+ qsec +,data=mtcars)
a <- lm(mpg ~  hp + wt + am+ qsec ,data=mtcars)
summary(a)
a <- lm(mpg ~  hp + wt:am + am+ qsec ,data=mtcars)
summary(a)
a <- lm(mpg ~ wt:am + am+ qsec ,data=mtcars)
summary(a)
mtcars$am <- factor(mtcars$am, levels=c(0,1), labels=c('Auto', 'Man'))
a <- lm(mpg ~ wt:am + am+ qsec ,data=mtcars)
summary(a)
a <- lm(mpg ~  hp + wt + am+ qsec ,data=mtcars)
summary(a)
a <- lm(mpg ~  hp + wt:am + am+ qsec ,data=mtcars)
summary(a)
summary(a)
a <- lm(mpg ~  cyl + wt:am + am+ qsec ,data=mtcars)
summary(a)
a <- lm(mpg ~  drat + wt:am + am+ qsec ,data=mtcars)
summary(a)
a <- lm(mpg ~  gear:am + wt:am + am+ qsec ,data=mtcars)
summary(a)
a <- lm(mpg ~  gear+ wt:am + am+ qsec ,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + am+ qsec ,data=mtcars)
summary(a)
a <- lm(mpg ~  wt + am+ qsec ,data=mtcars)
summary(a)
a <- lm(mpg ~  wt + am+ qsec +gear ,data=mtcars)
summary(a)
a <- lm(mpg ~  wt + am+ qsec ,data=mtcars)
summary(a)
fitTransmission <- lm(mpg ~ am,data=mtcars)
summaryFitTx <- summary(fitTransmission)
summaryFitTx
a <- lm(mpg ~  wt,data=mtcars)
summary(a)
a <- lm(mpg ~  wt +cyl,data=mtcars)
summary(a)
a <- lm(mpg ~  wt +qsec,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + gear +am,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + qsec +am,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + dart +am,data=mtcars)
a <- lm(mpg ~  wt:am + drat +am,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + cyl +am,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + carb +am,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + carb:gear +am,data=mtcars)
summary(a)
mtcars$gear <- factor(mtcars$gear)
a <- lm(mpg ~  wt:am + gear +am,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + qsec:gear +am,data=mtcars)
summary(a)
fitWeightTx <- lm(mpg ~ wt + am ,data=mtcars)
summaryfitWeightTx <- summary(fitWeightTx)
summaryfitWeightTx
a <- lm(mpg ~  wt:am + hp +am,data=mtcars)
summaryfitWeightTx
summary(a)
a <- lm(mpg ~  wt:am + hp +am,data=mtcars)
summary(a)
summaryfitWeightTx
a <- lm(mpg ~  wt:am + hp +am,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + hp:am +am,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + hp +am,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + hp:am +am,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am +am,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + gear+am,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + carb+am,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + drat+am,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + disp+am,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + cyl+am,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am + cyl+am+qsec,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am +am+qsec,data=mtcars)
summary(a)
a <- lm(mpg ~  wt:am +am+hp,data=mtcars)
summary(a)
summaryfitWeightTx
ggpairs()
library(ggplot2)
library(GGally)
ggpairs()
View(mtcars)
fitWeightInterTx <- lm(mpg ~ wt:am + am ,data=mtcars)
summaryfitWeightInterTx <- summary(fitWeightInterTx)
summaryfitWeightInterTx
data(mtcars)
mtcars$am <- factor(mtcars$am, levels=c(0,1), labels=c('Auto', 'Man'))
columnsForFactors = c(8,10,11)
mtcars[,columnsForFactors] <- lapply(mtcars[,columnsForFactors] , factor)
fitTransmission <- lm(mpg ~ am,data=mtcars)
summaryFitTx <- summary(fitTransmission)
summaryFitTx
fitWeightTx <- lm(mpg ~ wt + am ,data=mtcars)
summaryfitWeightTx <- summary(fitWeightTx)
summaryfitWeightTx
However from ggpair plot,in the wt vs mpg frame,the scatterplot indicates that there is an interaction term between “wt” variable and “am” variable.We will include am as an iteraction term.
```{r, echo=FALSE}
fitWeightInterTx <- lm(mpg ~ wt:am + am ,data=mtcars)
summaryfitWeightInterTx <- summary(fitWeightInterTx)
summaryfitWeightInterTx
fitWeightInterTx <- lm(mpg ~ wt:am + am ,data=mtcars)
summaryfitWeightInterTx <- summary(fitWeightInterTx)
summaryfitWeightInterTx
fitWt_TxQsec <- lm(mpg ~ wt:am + am + qsec,data=mtcars)
summaryfitWt_TxQsec <- summary(fitWt_TxQsec)
summaryfitWt_TxQsec
fitWeightInterTx <- lm(mpg ~ wt:am + am ,data=mtcars)
summaryfitWeightInterTx <- summary(fitWeightInterTx)
fitWt_TxQsec <- lm(mpg ~ wt + am + qsec,data=mtcars)
summaryfitWt_TxQsec <- summary(fitWt_TxQsec)
summaryfitWt_TxQsec
fitmod5 <- lm(mpg ~ wt:am + am + qsec + gear,data=mtcars)
summaryfitmod5 <- summary(fitmod5)
summaryfitmod5
data(mtcars)
fitTransmission <- lm(mpg ~ am,data=mtcars)
summaryFitTx <- summary(fitTransmission)
fitWeightTx <- lm(mpg ~ wt + am ,data=mtcars)
summaryfitWeightTx <- summary(fitWeightTx)
fitWeightInterTx <- lm(mpg ~ wt:am + am ,data=mtcars)
summaryfitWeightInterTx <- summary(fitWeightInterTx)
fitWt_TxQsec <- lm(mpg ~ wt:am + am + qsec,data=mtcars)
summaryfitWt_TxQsec <- summary(fitWt_TxQsec)
summaryfitWt_TxQsec$coefficients
fitmod5 <- lm(mpg ~ wt:am + am + qsec + gear,data=mtcars)
summaryfitmod5 <- summary(fitmod5)
library(caret)
install.packages('caret')
install.packages('mgcv')
install.packages('mgcv')
install.packages('car')
install.packages('caret')
```{r, echo=FALSE}
setwd('/home/vrinda/IntroToBDA/datasciencecoursera/Practical_Machine_Learning/')
```
```{r}
if (!file.exists("pml-training.csv")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "pml-training.csv")
}
if (!file.exists("pml-testing.csv")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "pml-testing.csv")
}
train_data <- read.csv("pml-testing.csv", sep = ",", na.strings = c("", "NA"))
test_data <- read.csv("pml-training.csv", sep = ",", na.strings = c("", "NA"))
```
colnames(train_data)
train_data <- read.csv("pml-training.csv", sep = ",", na.strings = c("", "NA"))
test_data <- read.csv("pml-testing.csv", sep = ",", na.strings = c("", "NA"))
colnames(train_data)[1:10]
colnames(train_data)[1:7]
colnames(train_data)
which(is.na(train_data))
set.seed(1516)
inTrain <- createDataPartition(train_data$classe, p=0.70, list=F)
trainData <- train_data[inTrain, ]
testData <- train_data[-inTrain, ]
validation_data <- read.csv("pml-testing.csv", sep = ",", na.strings = c("", "NA"))
train_data <- train_data[, colSums(is.na(train_data)) == 0]
validation_data <- validation_data[, colSums(is.na(validation_data)) == 0]
train_data <- train_data[,8:length(colnames(train_data))]
validation_data <- df_testing[,8:length(colnames(validation_data))]
validation_data <- validation_data[,8:length(colnames(validation_data))]
nzv <- nearZeroVar(train_data,saveMetrics=TRUE)
library(caret)
nzv <- nearZeroVar(train_data,saveMetrics=TRUE)
train_data <- train_data[,nzv$nzv==FALSE]
nzv <- nearZeroVar(validation_data,saveMetrics=TRUE)
validation_data <- validation_data[,nzv$nzv==FALSE]
View(nzv)
?rpart
inTrain <- createDataPartition(train_data$classe, p=0.70, list=F)
trainData <- train_data[inTrain, ]
testData <- train_data[-inTrain, ]
library(rpart)
?rpart
?caret
??caret
?train
?rpart
modelRpart <- train(classe ~ ., data=trainData, method="rpart", trControl=controlRf)
controlRf <- trainControl(method="cv", 5)
modelRpart <- train(classe ~ ., data=trainData, method="rpart", trControl=controlRf)
modelRpart
predictRpart <- predict(modelRpart, testData)
confusionMatrix(testData$classe, predictRpart)
accuracy <- postResample(predictRf, testData$classe)
accuracy <- postResample(predictRpart, testData$classe)
accuracy
ooseRpart <- 1 - as.numeric(confusionMatrix(testData$classe, predictRf)$overall[1])
accuracyRpart <- postResample(predictRpart, testData$classe)
ooseRpart <- 1 - as.numeric(confusionMatrix(testData$classe, predictRpart)$overall[1])
accuracyRpart
ooseRpart
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, allowParallel=TRUE )
?randomForest
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, allowParallel=TRUE )
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, allowParallel=TRUE )
?saveRDS
saveRDS(modelRf,file = 'random_forest.rds')
modelRf
predictRf <- predict(modelRf, testData)
confusionMatrix(testData$classe, predictRf)
accuracyRf <- postResample(predictRf, testData$classe)
print(paste('Accuracy Random Forest :',accuracyRf ))
out_of_se <- 1 - as.numeric(confusionMatrix(testData$classe, predictRpart)$overall[1])
print(paste('Out of sample error Random Forest :',out_of_se ))
The random forest fit is clearly more accurate than the rpart method with around 99% accuracy.
validate <- predict(modelRf, validation_data[, -length(names(validation_data))])
validate
rf_features = data.frame(modelRf$importance)
influential_features = order(-rf_features$MeanDecreaseGini)
rf_features
modelRf$results
modelRf$bestTune
modelRf$terms
modelRf$coefnames
modelRf$call
modelRf$modelInfo
modelRf$finalModel
modelRf$times
fancyRpartPlot(modelRpart$finalModel)
plot(modelRpart$finalModel)
plot(modelRpart)
modelRpart$finalModel
library(rpart.plot)
install.packages('rpart.plot')
library(rpart.plot)
fancyRpartPlot(modelRpart$finalModel)
prp(modelRpart$finalModel)
x <- readRDS('random_forest.rds')
predict(x, validation_data[, -length(names(validation_data))])
validate
if (!file.exists("random_forest.rds")) {
modelRf <- readRDS('random_forest.rds')
}else{
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, allowParallel=TRUE )
}
if (!file.exists("random_forest.rds")) {
print('yes')
}
if (file.exists("random_forest.rds")) {
print('yes')
}
if (!file.exists("random_forest.rds")) {
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, allowParallel=TRUE )
}else{
modelRf <- readRDS('random_forest.rds')
}
modelRF
modelRf <- readRDS('random_forest.rds')
if (!file.exists("random_forest.rds")) {
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, allowParallel=TRUE )
}else{
modelRf <- readRDS('random_forest.rds')
}
modelRF
if (!file.exists("random_forest.rds")) {
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, allowParallel=TRUE )
}else{
modelRf <- readRDS('random_forest.rds')
}
modelRf
